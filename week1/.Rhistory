+ carat, price, data = dsmall,
+ xlab = "Price ($)", ylab = "Weight (carats)",
+ main = "Price-weight relationship"
+ )
qplot(
carat, price, data = dsmall,
xlab = "Price ($)", ylab = "Weight (carats)",
main = "Price-weight relationship"
)
qplot(carat, data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
qplot(carat, ..density.., data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
xgrid <- with(df, seq(min(x), max(x), length = 50))
interp <- data.frame(
x = xgrid,
y = approx(df$x, df$y, xout = xgrid)$y,
colour = approx(df$x, df$colour, xout = xgrid)$y
)
qplot(x, y, data = df, colour = colour, size = I(5)) +
geom_line(data = interp, size = 2)
xgrid <- with(df, seq(min(x), max(x), length = 50))
interp <- data.frame(
x = xgrid,
y = approx(df$x, df$y, xout = xgrid)$y,
colour = approx(df$x, df$colour, xout = xgrid)$y
)
qplot(x, y, data = df, colour = colour, size = I(5)) +
geom_line(data = interp, size = 2)
qplot(cut ,color , data = diamonds, geom = "bar")
dat <- array(c(8, 52, 5, 164, 25, 29, 21, 128), c(2, 2, 2))
dat
mantelhaen.test(dat, correct = FALSE)
dtaStata <- read.dta("core2.dta", convert.dates=TRUE)
sessionInfo()
sessioninfo()
sessionInfo()
x<- c(15,19,10,6,4,9,24,6,26,8)
var(x)
sd(x)
sqrt(62.0111)
mean(x)
#################
# Make file for the book Reproducible Research with R and RStudio
# Christopher Gandrud
# Updated: 31 July 2013
#################
# This R source code compiles the manuscript for the book Reproducible Research with R and RStudio.
# It also updates the main README file.
## Installing required packages
# Note: To install the R packages used to compile the book open the Source/FrontMatter/Packages.Rnw.
# Find: doInstall <- FALSE in the code chunk labeled "FrontPackageCitations".
# Change the value `FALSE` to `TRUE` and run the code chunk.
# Load knitr package
library(knitr)
# Specify working directories.
## Rep-Res-Parent.Rnw
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/"
## README.Rmd
SetupDirectory <- "/git_repositories/Rep-Res-Book/Writing_Setup/"
##### Create PDF Book Manuscript ####
# Compile the book's parent document
setwd(ParentDirectory)
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
# Embed fonts
# This is largely for complete replication purposes only and is not necessary.
## If using Windows please see extrafont set up instructions at https://github.com/wch/extrafont
# extrafont::embed_fonts("Rep-Res-Parent.pdf")
# Clean up /git_repositories/Rep-Res-Book/Source/Parent/
# DeleteFiles <- setdiff(list.files(ParentDirectory), c("Rep-Res-Parent.Rnw",
#                                                      "Rep-Res-Parent.pdf",
#                                                      "krantz.cls", "figure",
#                                                      "cache")
#                       )
# unlink(DeleteFiles)
#### README ####
# Change working directory to /Rep-Res-Book/Writing_Setup/
setwd(SetupDirectory)
# Knit README file
knitr::knit(input = "README.Rmd", output = "~/GitHub/git_repositories/Rep-Res-Book/README.md")
install.packages(c("Cairo", "digest", "httpuv", "memisc", "Rcmdr", "roxygen2"))
install.packages("rmysql")
swirl()
libary("swirl")
library("swirl")
swirl()
update_swirl()
swirl()
s = c("0:04:13", "0:04:06", "0:03:50", "0:03:42", NA, NA, NA, "0:03:59", NA, NA,NA, "0:03:50")
s = c(0:04:13, 0:04:06, 0:03:50, 0:03:42, NA, NA, NA, 0:03:59, NA, NA,NA, 0:03:50)
s = c("0:04:13", "0:04:06", "0:03:50", "0:03:42", NA, NA, NA, "0:03:59", NA, NA,NA, "0:03:50")
strftime(s, format = "%H:%M%S", tz = "", usetz = FALSE, ...)
strftime(s, format = '%H:%M%S', tz = '', usetz = FALSE)
strftime(s, format = '%H:%M%S',  usetz = FALSE)
strftime(s, format = '%H:%M:%S',  usetz = FALSE)
s = c("00:04:13", "00:04:06", "00:03:50", "00:03:42", NA, NA, NA, "00:03:59", NA, NA,NA, "00:03:50")
strftime(s, format = '%H:%M:%S',  usetz = FALSE)
s = c("00:04:13", "00:04:06", "00:03:50", "00:03:42","00:03:59", "00:03:50")
strftime(s, format = '%H:%M:%S',  usetz = FALSE)
?DateTimeClasses
strptime(s, format = '%H:%M:%S',  usetz = FALSE)
strptime(s, format = '%H:%M:%S')
mean(s)
mean(na.omit(s))
library(chron)
mean(s,na.rm=TRUE)
times <- chron(s)
times <- chron(times.=paste(s, ":00", sep="")
)
?chron
times <- chron(times = s)
times
mean(times,na.rm=TRUE)
timearray <- c(
'0:04:13',
'0:04:06',
'0:03:50',
'0:03:42',
NA
)
timearray <- strptime(timearray,'%H:%M:%S')
mean(timearray, na.rm = TRUE)
data(tips, package="reshape2")
# this works :
ggplot(data=tips, aes(x=day)) + geom_bar()
# but this doesn't work:
column <- "day"
ggplot(data=tips, aes(x=column)) + geom_bar()
# you need aes_string() in such a situation:
ggplot(data=tips, aes_string(x=column)) + geom_bar()
library("reshape2")
library("ggplot2")
data(tips, package="reshape2")
# this works :
ggplot(data=tips, aes(x=day)) + geom_bar()
# but this doesn't work:
column <- "day"
ggplot(data=tips, aes(x=column)) + geom_bar()
# you need aes_string() in such a situation:
ggplot(data=tips, aes_string(x=column)) + geom_bar()
tips
ggplot(data=tips, aes_string(x=column)) + geom_bar()
ggplot(data=tips, aes(x=column)) + geom_bar()
ggplot(data=tips, aes(x=day)) + geom_bar()
\documentclass[DIV=calc, paper=a4, fontsize=11pt]{scrartcl}
\usepackage[cm]{fullpage} %reduce the margin set by latex of 60-70 words per line
\usepackage{hyperref} %control links color and appearance
\hypersetup{colorlinks=true ,linkcolor=red} %setup link color to red
\usepackage[protrusion=true,expansion=true]{microtype} % Better typography
%\documentclass{scrartcl}
\usepackage{graphicx} %package for attaching images
\begin{document}
\SweaveOpts{concordance=TRUE}
\title{Install R and R Studio}
\author{}
\date{\today}
\maketitle{}
\clearpage
\section*{R for Windows}
There are two versions of the R executable in R-3.0.2/bin/i386 (32-bit)
and R-3.0.2/bin/x64 (64-bit).  By default only the first is
installed on 32-bit versions of Windows, and both on 64-bit OSes.
The distribution is distributed as an installer R-3.0.2-win.exe (latest version).
\subsection{Installation of R on Windows}
Download R setup file (provided with this CD) from http://cran.r-project.org/
\begin{enumerate}
\item Double click on the R-3.0.2-win.exe
\item  Follow the prompts ; and on the select components prompt -if you are using a 64bit select all the components and continue with the default settings
\end{enumerate}
Source: \url http://cran.r-project.org/bin/windows/base/README.R-3.0.2
\end{subsection}
\subsection{Installation of R-Studio on Windows}
Download R-studio setup file (provided with this CD) from \url http://www.rstudio.com/ide/download/desktop
\begin{enumerate}
\item Double click on the RStudio 0.98.490.exe
\item Follow the prompts ;keep the default settings during installation process
\end{enumerate}
\end{subsection}
\end{section}
\section*{R for Mac-OS}
Since R 3.0.0 the binary is a single-arch build and contains only the x86_64 (64-bit Intel) architecture. PowerPC Macs and 32-bit Macs are only supported by   building from sources or by older binary R versions. The default package type is "mac.binary" and the binary repository layout has changed accordingly.
\text R 3.0.2 binary for Mac OS X 10.6 (Snow Leopard) and higher, signed package. Contains R 3.0.2 framework, R.app GUI 1.62 in 64-bit for Intel Macs.
\subsection{Installation of R on Mac}
Download R setup file (provided with this CD) from \url http://cran.r-project.org/
\begin{enumerate}
\item Double click on the R-latest.pkg
\item Follow the prompts ;keep the default settings during installation process
\end{enumerate}
Source \url (http://cran.r-project.org/bin/macosx/)
\end{subsection}
\subsection{Installation of R-Studio on Mac (64-bit)}
Download R-studio setup file (provided with this CD) from \url http://www.rstudio.com/ide/download/desktop
\begin{enumerate}
\item Double click on the RStudio-0.98.490.dmg
\item Follow the prompts ; keep the default settings during installation process
\end{enumerate}
\end{subsection}
\end{section}
\section*{R for Ubuntu}
The current version of R available when a new version of Ubuntu is released is always available in the universe repository. To install R:
sudo apt-get install r-base r-base-dev
\subsection{Installation of R-Studio on Ubuntu }
On the Terminal, use the "cd" command to move to the directory in which your downloads are saved (the path to this CD), and issue this command:
\begin{quote}
sudo gdebi rstudio-0.98.490-amd64.deb (on a 64 bit)
sudo gdebi rstudio-0.98.490-i386.deb (on a 32 bit)
\end{quote}
useful presentation here: \url http://www.ats.ucla.edu/stat/r/seminars/intro.htm
\end{subsection}
\end{section}
\section*{Install Packages}
hggh
\end{section}
\end{document}
df <- structure(list(ID = c("ABX:22798", "ABX:23798", "ABX:22498", "ABX:22728", "ABX:22228"), YR = c(1976, 1983, 2010, 2010, 2011), SC = c("A's Frnd; Cat; Cat & Mse", "A's Frnd; Cat; Zebra Fish", "Zebra Fish", "Bear; Dog; Zebra Fish", "Bear")), .Names = c("ID", "YR", "SC"), row.names = c(NA, 5L), class = "data.frame")
df
library(ggplot2)
test1 <- data.frame(name = c('a', 'b', 'c'),
val = 1:3)
test1$name <- factor(test1$name,
levels = as.character(test1$name[order(-test1$val)]))
gg1 <- ggplot(data = test1) + geom_bar(aes(x = name, y = val, fill = val))
gg1
test2 <- data.frame(name = c('a', 'b', 'c'),
val = c(3, 1, 2))
test2$name <- factor(test2$name,
levels = as.character(test2$name[order(-test2$val)]))
gg2 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val))
gg2
test1$name <
-
factor(test1$name,
levels = as.character(test1$name[order(-test1$val)]))
test1$name
gg2 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = test1$name ))
gg2
test1 <- data.frame(name = c('a', 'b', 'c'),
val = 1:3)
test1$name <- factor(test1$name,
levels = as.character(test1$name[order(-test1$val)]))
gg1 <- ggplot(data = test1) + geom_bar(aes(x = name, y = val, fill = val))
gg1
test2$name <- factor(test2$name,
levels = as.character(test2$name[order(-test2$val)]))
gg2 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = test1$name ))
gg2
g <- ggplot_build(gg1)
myPalette <- unique(g$data[[1]]["fill"])[, 1]
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) #+
scale_fill_manual(values = myPalette)
gg3
myPalette
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) #+
scale_fill_manual(values = c("3.0" = "red", "2.5" = "orange", "2.0" = "blue", "1.5 = "green"))
data
test2
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("3" = "red", "1" = "orange", "2" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c(3 = "red", 1 = "orange", 2 = "blue"))
test2$val <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
test2
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name,  fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, weight = val, fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
test2 <- data.frame(name = c('a', 'b', 'c'),
val = c(3, 1, 2))
test2
test2$val <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, weight = val, fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name,  fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, weight = val, fill = val))
gg3
test2 <- data.frame(name = c('a', 'b', 'c'),
val = c(3, 1, 2))
test2$val2 <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
test2
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, fill = val)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("1" = "red", "2" = "orange", "3" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("1" = "red", "2" = "orange", "3" = "blue"))
test2$name <- factor(test2$name,
levels = as.character(test2$name[order(-test2$val)]))
ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) + scale_fill_manual(values = c("1" = "red", "2" = "orange", "3" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val))
ggplot(data = test2) + geom_bar(aes(x = name, y = val))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val))
test2$val2 <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) + scale_fill_manual(values = c("1" = "red", "2" = "orange", "3" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) + scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
test2 <- data.frame(name = c('a', 'b', 'c'),
val = c(3, 1, 2,3,2,1,1,2,3))
test2$val2 <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) +
scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) +
scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2)) +
scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name, weight = val,fill=val2))
val2
test2
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2)) +
scale_fill_manual(values = c("one" = "red", "two" = "orange", "three" = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2)) +
scale_fill_manual(values = c(1 = "red", 2 = "orange", 3 = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2)) +
scale_fill_manual(values = c('1' = "red", '2' = "orange", '3' = "blue"))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2)) +
scale_fill_manual(values = c('one' = "red", 'two' = "orange", 'three' = "blue"))
g <- ggplot_build(gg1)
myPalette <- unique(g$data[[1]]["fill"])[, 1]
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) #+
scale_fil
g <- ggplot_build(gg1)
myPalette <- unique(g$data[[1]]["fill"])[, 1]
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name, y = val, fill = val)) #+
scale_fill_manual(values = myPalette)
gg3
g <- ggplot_build(gg1)
myPalette <- unique(g$data[[1]]["fill"])[, 1]
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name,weight = val, fill = val)) #+
scale_fill_manual(values = myPalette)
gg3
gg3 <- ggplot(data = test2) + geom_bar(aes(x = name,weight = val, fill = val))
gg3
ggplot(data = test2) + geom_bar(aes(x = name, fill = val))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val2)) +
scale_fill_manual(values = c('One' = "red", 'Two' = "orange", 'Three' = "blue"))
test2$val <- factor(test2$val,
levels = c(1,2,3),
labels = c("One", "Two","Three"))
ggplot(data = test2) + geom_bar(aes(x = name,fill=val)) +
scale_fill_manual(values = c('One' = "red", 'Two' = "orange", 'Three' = "blue"))
install.packages('ProjectTemplate')
library("projecttemplate")
library("ProjectTemplate")
create.project("trials_only")
search()
library("siwrl")
library("swirl")
swirl()
update_swirl()
swirl()
data<-data.frame(X=rep(letters[1:3], each=4),Y=sample(1:12,12))
sum( data[ data[,1]=="a" , -1 ] )
data
sum( data[ data[,1]=="a"  ] )
sum( data[ data[,1]=="a" ,1 ] )
sum( data[ data[,1]=="a" ,-1 ] )
sum( data[ data[,1]=="a" ,-2 ] )
sum(data$X)which(data$X=="a")
sum(data$Y ,which(data$X=="a"))
sum(data$Y)
library(doBY)
library("doBY")
library("doBy")
library("doBy", lib.loc="C:/Users/kmwai/Documents/R/win-library/3.0")
install.packages("udubits2")
install.packages("udunits2")
setwd("H:/Rjob/coreGraphs/core2Report")
created by kmwai from 19112013. this is aimed at visualization of core3 clinical data set
#load the packages
library(ggplot2)
library(foreign)
library(reshape2)
library(psych)
library(epicalc)
library(plyr)
library(doBy) #used to summarize
#setting the working directory
setwd("H:/R_job/coreGraphs" )
#load the core 2 data
core3 <- read.dta("core3.dta", convert.dates=TRUE)
core3 <- as.data.frame(core3)
core3$ndad<-as.Date(dtaStata$ndad,origin="1960-01-01")
table(core3$yr)
#variables in core2
core2.variables <- as.data.frame(sapply(dtaStata, class) )
#count the tota paediatric admissions till 2011
table(core3$yr)
total.Serialno <- summaryBy(serialno~yr, data=core3, FUN=function(x)
c(count=length(x)))
#graphing function
graphing<- function(x,yr,value,variable,name,title ){
graph <- ggplot(x,aes(yr,value,fill=variable))+
geom_bar(stat="identity",position="dodge") + ylab("Count") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"), text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1) )
ggsave(filename=name, plot=graph)
}
#scatterPlot
graphing.Scatter <- function(df ,yr2 ,x2, changeOver ,title ,yrX ,name ){
yr2<- paste(yr2, sep="")
x2<- paste(x2, sep="")
scatter <- ggplot(df, geom="jitter", size=1, aes(x=paste(yr2, sep="") , y=x, geom_jitter(position_jitter(0.8)))) + geom_point(aes(colour = changeOver)) +
ylab("Value") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"),text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1)) +
scale_x_continuous(breaks = round(seq(min(yrX), max(yrX), by = 1),1))
ggsave(filename=name, plot= scatter)
}
graphing.Scatter(- , yr , ntemp ,changeOver ,"temp Count" , dtaStata$yr ,"core2Graphics/temp_scatter.pdf")
#-----------------------------------------------------------------------------------------#
graphing.Scatter <- function(df ,yr2 ,x2, changeOver ,title ,yrX ,name ){
yr2<- paste(yr2, sep="")
x2<- paste(x2, sep="")
scatter <- ggplot(df, geom="jitter", size=1, aes(x=paste(yr2, sep="") , y=x, geom_jitter(position_jitter(0.8)))) + geom_point(aes(colour = changeOver)) +
ylab("Value") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"),text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1)) +
scale_x_continuous(breaks = round(seq(min(yrX), max(yrX), by = 1),1))
ggsave(filename=name, plot= scatter)
}
graphing.Scatter(df , yr , ntemp ,changeOver ,"temp Count" , dtaStata$yr ,"core2Graphics/temp_scatter.pdf")
ls(environment(graphing.Scatter))
yr2<- yr
yr2 <- yr
yr2 <- 'yr'
graphing.Scatter <- function(df ,yr2 ,x2, changeOver ,title ,yrX ,name ){
# yr2<- paste(yr2, sep="")
x2<- paste(x2, sep="")
scatter <- ggplot(df, geom="jitter", size=1, aes(x=paste(yr2, sep="") , y=x, geom_jitter(position_jitter(0.8)))) + geom_point(aes(colour = changeOver)) +
ylab("Value") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"),text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1)) +
scale_x_continuous(breaks = round(seq(min(yrX), max(yrX), by = 1),1))
ggsave(filename=name, plot= scatter)
}
graphing.Scatter(df , yr , ntemp ,changeOver ,"temp Count" , dtaStata$yr ,"core2Graphics/temp_scatter.pdf")
x2 <- 'ntemp'
graphing.Scatter <- function(df ,yr2 ,x2, changeOver ,title ,yrX ,name ){
# yr2<- paste(yr2, sep="")
#x2<- paste(x2, sep="")
scatter <- ggplot(df, geom="jitter", size=1, aes(x=paste(yr2, sep="") , y=paste(x2, sep=""), geom_jitter(position_jitter(0.8)))) + geom_point(aes(colour = changeOver)) +
ylab("Value") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"),text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1)) +
scale_x_continuous(breaks = round(seq(min(yrX), max(yrX), by = 1),1))
ggsave(filename=name, plot= scatter)
}
graphing.Scatter(df , yr , ntemp ,changeOver ,"temp Count" , dtaStata$yr ,"core2Graphics/temp_scatter.pdf")
graphing.Scatter <- function(yr2 ,x2, changeOver ,title ,yrX ,name ){
# yr2<- paste(yr2, sep="")
#x2<- paste(x2, sep="")
scatter <- ggplot(df, geom="jitter", size=1, aes(x=paste(yr2, sep="") , y=paste(x2, sep=""), geom_jitter(position_jitter(0.8)))) + geom_point(aes(colour = changeOver)) +
ylab("Value") + xlab("Year") +  ggtitle(title) +
theme(plot.title = element_text(lineheight=2.8, face="bold"),text = element_text(size=11), axis.text.x = element_text(angle=90, vjust=1)) +
scale_x_continuous(breaks = round(seq(min(yrX), max(yrX), by = 1),1))
ggsave(filename=name, plot= scatter)
}
graphing.Scatter( yr , ntemp ,changeOver ,"temp Count" , dtaStata$yr ,"core2Graphics/temp_scatter.pdf")
x <- list(rnorm(100), runif(100), rpois(100, 1))
sapply(x, quantile, probs = c(0.25, 0.75))
x <- matrix(rnorm(200), 50, 4)
x
apply(x, c(1, 2), mean)
apply(x, 1, sum)
apply(x, 2, min)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
s <- data.frame(split(airquality, airquality$Month))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],
na.rm = TRUE))
str(split(x, list(f1, f2)))
x <- (1,2,3,4,5,6,7,8,9)
x <- c(1,2,3,4,5,6,7,8,9)
y <- c(a,b,c,d,e,f,g,h,i)
y <- c("a","b","c","d","e","f","g","h","i")
df  <- data.frame(x=x, y=y)
df
View(cars)
cor(PE[2:4])
setwd("E:/pwaniTraining/pwani_stats/week1/day4/rfiles")
setwd("E:/pwaniTraining/pwani_stats/week1)
")
setwd("E:/pwaniTraining/pwani_stats/week1")
PE <- read.table("data/physical_endurance.txt", header = T)
describe(PE)
#check normality (eclipse shape)
scatter.smooth(PE$age, PE$activeyears)
summary(PE$age)
summary(PE$activeyears)
hist(PE$age)
hist(PE$activeyears)
scatter.smooth(PE$age, PE$activeyears, abline=TRUE )
boxplot(PE$age)
boxplot(PE$activeyears)
cor(PE[2:4])
cor(PE$age, PE$activeyears )
cor.test(PE$age, PE$activeyears)
